@inject ToDo_List.Data.Repository.IRepository repository;

@page "/todo"

@inject ToDo_List.Data.Email_controller Email_controller;

<div class = "container-fluid">

       <div hidden class="alert alert-warning alert-dismissible fade show" role="alert">
  <strong>Holy guacamole!</strong> You should check in on some of those fields below.
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

    <div class = "row">
        <div class="col">
            <h1 class="text-center">ToDo</h1>
            <h2 class="text-center text-primary">Still needs to be done (@todos.Count(item => !item.IsDone))</h2>
            <h3 class="text-left">Progress in your affairs</h3>
            <progress id="ToDoProgress" max="@todos.ToArray().Length" value="@todos.Count(item => item.IsDone)"> </progress>
            
            <table class = "table table-striped">
                <thead class = "table-dark" style="font-size:1.4em;">
                    <tr>
                        <th scope = "col">Title</th>
                        <th scope = "col">Is Done</th>
                        <th scope = "col">Date&Time</th>
                        <th scope = "col">Duration</th>
                        <th scope = "col">Location &nbsp; <i class="far fa-map-marked-alt"></i></th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var item in todos)
                {
                    
                    <tbody style="font-size:1.2em;">
                        <tr>
                            <td>
                                @if (DateTime.Now < item.Date) {
                                   
                                    <div id="ToDoItem" style="@(item.IsDone ? "color:green; text-decoration:line-through;" : "color:red")" >
                                        @item.Title
                                        
                                    </div>
                                }
                                else
                                {
                                    if ((item.Sended_mail == 0)||(item.Sended_mail == 2))
                                    {
                                        repository.Sended_email(item.Id);
                                        var s = Email_controller.Send_email("andr.sosn@gmail.com", item.Id, item.Title, item.Date, item.Duration, item.Location);

                                        // if(s == true)
                                        //{
                                        //  repository.Sended_email(item.Id);
                                        // }
                                       
                                    }
                                    //item.IsDone = false;
                                    <div id="ToDoItem" style="opacity:0.6; background-color:orange;">
                                       <span style=" @(item.IsDone ? "color:green; text-decoration:line-through;" : "color:red")"> @item.Title</span> &nbsp; <span style="opacity:0.7;color:lightgray; font-family:'Comic Sans MS';">Expired</span>
                                    </div>
                                }
                            </td>
                             <td>
                                 @if(item.IsDone == false)
                                 {
                                    <input  type="checkbox" id="checkbox"  value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                }
                                 else if(item.Date < DateTime.Now){
                                     <input  type="checkbox" id="checkbox" checked="checked" value="item.IsDone"  disabled="disabled" @onchange = "(()=>StatusChanger(item))" />
                                     
                                }
                                 else
                                 {
                                    <input type="checkbox" id="checkbox"  checked value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                 }
                            </td>
                            <td>
                                 @item.Date
                            </td>
                            <td>
                                <i class="fas fa-clock"></i> @item.Duration 
                            </td>
                            <td>
                               <i class="fa fa-map-marker-alt"></i> @item.Location
                            </td>
                               
                            <td>  
                                <a type="button" href="@url/@item.Id/@item.Title/@item.Duration/@item.Location" class="btn btn-outline-primary" data-bs-toggle="tooltip" data-bs-placement="bottom" title="When added: @item.CurrentDate"   >
                                    <i class="fas fa-calendar-edit" style="height:20px; width:20px;"></i>
                                 </a>
                                 <button class="btn btn-danger" @onclick ="(() => DeleteToDo(item.Id))">Delete</button>
                             </td>
                             
                        </tr>
                   </tbody>
                }
                
            </table>

            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder = "Type something todo" @bind="newTodo"/>
                </div>
                  <div class="col">
                    <input type ="datetime-local" name="ToDoStart" class="form-control" id="datetime" @bind="Date" min="@DateTime.Now.ToString(format:"yyyy-MM-ddTHH:mm")"/>
               </div>
              <div class="col">
                  <select oninput = "DurationSelection()" id="select2" class="form-select form-control" aria-label="Default select" @bind="Duration">
                      <option value="0">Choose duration</option>
                      <option value="10 min">10 min</option>
                      <option value="1 hr">1 hr</option>
                      <option value="2 hr">2 hr</option>
                      <option value="3 hr">3 hr</option>
                      <option value="1" id="DurationOption">Custom</option>
                  </select>
                  <input class="form-control" id = "DurationInput" hidden="hidden" placeholder="Enter your duration" oninput = "DurationInput()"/>
              </div>
                <div class="col">
     
              <select oninput="LocationSelection()" id="select1" class="form-select form-control"  aria-label="Default select"  @bind="Location"  >
                  <option value="0">Choose one option here:</option>
                 <option value="Home">Home &#127968;</option>
                 <option value="School">School  &#127979;</option>
                 <option value="University">University &#x1F393;</option>
                 <option value="My district">My district &#127747;</option>
                 <option value="City Center">City center &#127750;</option>
                 <option value="Village">Village &#9978;</option>
                 <option value="Another country">Another country  &#127758;</option>
                 <option value="1" id="LocationOption" >-Choose another location-</option>
                @* <option value="Another location"><input type="text" class="form-control" placeholder="Another location"/></option>
              *@
          </select>
          <input class="form-control" id="LocationInput" hidden="hidden" placeholder="Enter another location" oninput = "LocationInput()"/>
             </div>
               <div class="col">
                    <button class="btn btn-success" @onclick="AddTodo" id="AddTodo" onmouseout="HideInputs()" > Add todo</button>
               </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ToDoItem Id { get; set; }
    [Parameter] public ToDoItem Title { get; set; }

    private IEnumerable<ToDoItem> todos = new List<ToDoItem>();

    private string newTodo;

    private DateTime? Date;

    private string? Duration;

    private string? Location;

    private DateTime? CurrentDate;

    private string url = string.Empty;
   
    //List initializing ; to pick up all data from database
    protected override void OnInitialized()
    {

        todos = repository.GetAllItems();
        // url = $"edit/{388}";
        url = $"edit";

        //repository.GetToDoById(id:348)
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo) && !string.IsNullOrWhiteSpace(Location))
        {

            // Adding new task to list

            //todos.Add(new ToDoItem{Title = newTodo});
            if ((Date != null)&&(Duration is not null)&&(Location is not null))
            {
                CurrentDate = DateTime.Now;
                repository.AddTodo(newTodo, Date, CurrentDate, Duration, Location);
            }

            // Clear our input
            newTodo = string.Empty;

            // Set the current Date again

            Date = DateTime.Today;

        }
    }

    // If method has parameters, we use '()=>' expression

    private void DeleteToDo(int id)
    {
        //todos.Remove(deletedItem);

        repository.DeleteItem(id);
    }
   
    private void StatusChanger(ToDoItem changedItem)
    {
        changedItem.IsDone = !changedItem.IsDone;
        repository.ValueChanged(changedItem);
        // repository.Sended_mail(348);
        // repository.Sended_email(changedItem.Id);
    }
    
}
