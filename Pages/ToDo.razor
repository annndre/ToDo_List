@inject ToDo_List.Data.Repository.IRepository repository;

@page "/todo"

<div class = "container-fluid">
    <div class = "row">
        <div class="col">
            <h1 class="text-center">ToDo</h1>
            <h2 class="text-center text-primary">Still needs to be done (@todos.Count(item => !item.IsDone))</h2>

            <table class = "table table-striped">
                <thead class = "table-dark" style="font-size:1.4em;">
                    <tr>
                        <th scope = "col">Title</th>
                        <th scope = "col">Is Done</th>
                        <th scope = "col"></th>
                    </tr>
                </thead>
                @foreach (var item in todos)
                {
                    <tbody style="font-size:1.2em;">
                        <tr>
                             <td>
                                 <div style="@(item.IsDone ? "color:green; text-decoration:line-through;" : "color:red")">
                                 @item.Title
                                 </div>
                             </td>
                             <td>
                                 @if(item.IsDone == false)
                                 {
                                    <input type="checkbox" value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                 }
                                 else
                                 {
                                    <input type="checkbox" checked value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                 }
                            </td>
                             <td>
                                 <button class="btn btn-danger" @onclick ="(() => DeleteToDo(item.Id))">Delete</button>
                                  <button class = "btn btn-primary">Edit Title</button>
                             </td>
                        </tr>
                   </tbody>
                }
                
            </table>
            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder = "Type something todo" @bind="newTodo"/>
                </div>
                <div class="col">
                    <button class="btn btn-success" @onclick = "AddTodo"> Add todo</button>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    private IEnumerable<ToDoItem> todos = new List<ToDoItem>();

    //List initializing ; to pick up all data from database
    protected override void OnInitialized()
    {
        todos = repository.GetAllItems();
    }

    private string newTodo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            // Adding new task to list

            //todos.Add(new ToDoItem{Title = newTodo});

            repository.AddTodo(newTodo);

            // Clear our input
            newTodo = string.Empty;
        }
    }
    // If method has parameters, we use '()=>' expression

    private void DeleteToDo(int id)
    {
        //todos.Remove(deletedItem);

        repository.DeleteItem(id);
    }

    private void StatusChanger(ToDoItem changedItem)
    {
        changedItem.IsDone = !changedItem.IsDone;
        repository.ValueChanged(changedItem);
    }
}
