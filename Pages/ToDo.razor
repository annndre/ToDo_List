@inject ToDo_List.Data.Repository.IRepository repository;

@page "/todo"


<div class = "container-fluid">
    <div class = "row">
        <div class="col">
            <h1 class="text-center">ToDo</h1>
            <h2 class="text-center text-primary">Still needs to be done (@todos.Count(item => !item.IsDone))</h2>

            <table class = "table table-striped">
                <thead class = "table-dark" style="font-size:1.4em;">
                    <tr>
                        <th scope = "col">Title</th>
                        <th scope = "col">Is Done</th>
                        <th scope = "col">Date&Time</th>
                        <th scope = "col">Location &nbsp; <i class="far fa-map-marked-alt"></i></th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var item in todos)
                {
                    <tbody style="font-size:1.2em;">
                        <tr>
                             <td>
                                 <div id="ToDoItem" style="@(item.IsDone ? "color:green; text-decoration:line-through;" : "color:red")">
                                 @item.Title
                                 </div>
                             </td>
                             <td>
                                 @if(item.IsDone == false)
                                 {
                                    <input type="checkbox" value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                 }
                                 else
                                 {
                                    <input type="checkbox" checked value = "item.IsDone" @onchange = "(()=>StatusChanger(item))"/>
                                 }
                            </td>
                            <td>
                                 @item.Date
                            </td>
                            <td>
                               <i class="fa fa-map-marker-alt"></i> @item.Location
                            </td>
                            
                             <td>
                                 <button class="btn btn-danger" @onclick ="(() => DeleteToDo(item.Id))">Delete</button>
                                  <button class = "btn btn-primary">Edit Title</button>
                             </td>
                        </tr>
                   </tbody>
                }
                
            </table>

            <div class="row">
                <div class="col">
                    <input class="form-control" placeholder = "Type something todo" @bind="newTodo"/>
                </div>
                  <div class="col">
                    <input type ="datetime-local" name="ToDoStart" class="form-control" @bind="Date" min="@DateTime.Now.ToString(format:"yyyy-MM-ddTHH:mm")"/>
               </div>
               <div class="col">
     @* @bind:format="yyyy-MM-dd" min="@DateTime.Today.ToString(format:"yyyy-MM-dd")"*@
     
      
              <select oninput="Selection()" id="select1" class="form-select form-control"  aria-label="Default select"  @bind="Location"  >
                  <option value="0">Choose one option here:</option>
                 <option value="Home">Home &#127968;</option>
                 <option value="School">School  &#127979;</option>
                 <option value="University">University &#x1F393;</option>
                 <option value="My district">My district &#127747;</option>
                 <option value="City Center">City center &#127750;</option>
                 <option value="Village">Village &#9978;</option>
                 <option value="Another country">Another country  &#127758;</option>
                 <option value="1" id="option1" >-Choose another location-</option>
                @* <option value="Another location"><input type="text" class="form-control" placeholder="Another location"/></option>
              *@
          </select>
          <input class="form-control" id="input1" hidden="hidden" placeholder="Enter another location" oninput = "Input()"/>
          
               </div>
              @* <div class="col">
                   <input type="time" class="form-control" @bind="Time" />
               </div>*@
               <div class="col">
                    <button class="btn btn-success" @onclick="AddTodo" id="AddTodo" onmouseover="HideInput()" > Add todo</button>
               </div>
            </div>
        </div>
    </div>
</div>

@code {

    private IEnumerable<ToDoItem> todos = new List<ToDoItem>();

    private DateTime? Date;

    // private TimeOnly? Time;

    private string? Location;


    //List initializing ; to pick up all data from database
    protected override void OnInitialized()
    {
        todos = repository.GetAllItems();

        //Time = TimeOnly.FromDateTime(DateTime.Now);
    }

    private string newTodo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo) && !string.IsNullOrWhiteSpace(Location))
        {

            // Adding new task to list

            //todos.Add(new ToDoItem{Title = newTodo});
            if ((Date != null)&&(Location != "0"))
            {
                repository.AddTodo(newTodo, Date,Location);

            }

            // Clear our input
            newTodo = string.Empty;

            // Set the current Date again

            Date = DateTime.Today;
           

        }
    }


    // If method has parameters, we use '()=>' expression

    private void DeleteToDo(int id)
    {
        //todos.Remove(deletedItem);

        repository.DeleteItem(id);
    }

    private void StatusChanger(ToDoItem changedItem)
    {
        changedItem.IsDone = !changedItem.IsDone;
        repository.ValueChanged(changedItem);
    }
}
