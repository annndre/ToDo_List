@page "/edit/{ToDoId:int}"
@page "/edit/{ToDoId:int}/{ToDoTitle}"
@page "/edit/{ToDoId:int}/{ToDoTitle}/{ToDoDuration}"
@page "/edit/{ToDoId:int}/{ToDoTitle}/{ToDoDuration}/{ToDoLocation}"


@inject ToDo_List.Data.Repository.IRepository repository;

<div class="container-fluid">
    <div class="row">
        <div class="col">
    <h1 class="text-info text-right text-uppercase">Edit todo</h1>
      </div>
    </div>
   <div class="row">
    <div class="col-6">
       @if (Editing is not null)
       {
           <EditForm Model="Editing" OnValidSubmit="Edit">
               <DataAnnotationsValidator/>
                <div class="form-group">
                    <label>Title name:</label>
                 <div>
                   <InputText class="form-control" @bind-Value="Editing.Title" />
                   <ValidationMessage For="(() => Editing.Title)" />
                 </div>
               </div>
               
                 <div class="form-group mb-2">
                    <label>Time:</label>
                  <div>
                    <input type="datetime-local" class="form-control" @bind-value="Editing.Date"  min="@DateTime.Now.ToString(format:"yyyy-MM-ddTHH:mm")"/>
                  </div>
                 </div>
               
               <div class="form-group mb-2">
                   <label>Duration:</label>
                   <div>
                       <InputSelect class="form-control" @bind-Value="Editing.Duration">
                           <option>10 min</option>
                           <option>30 min</option>
                           <option>1 hr</option>
                           <option>2 hr</option>
                           <option>3 hr</option>
                           <option>4 hr</option>
                           <option>10 hr</option>
                           <option>1 day</option>
                           <option>5 days</option>
                           <option>One week</option>
                           <option>One month</option>
                       </InputSelect>
                       <ValidationMessage For = "(()=>Editing.Duration)"/>
                   </div>
               </div>
               
                 <div class="form-group mb-2">
                    <label>Location:</label>
                    <div> 
                        <InputSelect class="form-control" @bind-Value="Editing.Location">
                            <option>Home</option>
                            <option>University</option>
                            <option>School</option>
                            <option>My district</option>
                            <option>Village</option>
                            <option>City center</option>
                            <option>Another country</option>
                         </InputSelect>
                        <ValidationMessage For="(()=> Editing.Location)"/>
                      </div>
                 </div>
                
                 <div class="form-group mb-2">
                      <label>Make as done</label>
                     <InputCheckbox id="checkbox" @bind-Value="Editing.IsDone"/>
                  </div>
            <div style="margin:10px;">
                @if(Editing.Title.Length == 0)
                {
                       <button class="btn btn-outline-success" disabled="disabled">Save</button>
                }
                 else
                 {
                       <button class="btn btn-outline-success" @onclick="(()=>UpdateToDo())" >Save</button>      
                 }
                     <a type="button" href="https://localhost:7040/todo" class="btn btn-outline-primary" style="margin:10px">ToDoList</a>
            </div>
           </EditForm>
       }
        </div>
      </div>
     <div class="row">
            
                <div class="text-align-content-center py-2 @cssClass">@message</div>
                @foreach(var item in todos)
                {
                    <div class="row justify-content-center m-1 text-white">
                        <div class="col bg-info">
                            <h5><span class="text-secondary">ID:</span> @item.Id</h5>
                        </div>
                        <div class="col bg-info">
                            <h5><span class="text-secondary">Title:</span> @item.Title</h5>
                        </div>
                        <div class="col bg-info">
                            <h5><span class="text-secondary">Date&Time:</span> @item.Date</h5>
                        </div>
                        <div class="col bg-info">
                            <h5><span class="text-secondary">Duration:</span> @item.Duration</h5>
                        </div>
                        <div class="col bg-info">
                           <h5><span class="text-secondary">Location:</span> @item.Location</h5>
                        </div>
                    </div>     
                }
        </div>
 </div>
  
@code {
    [Parameter] public int ToDoId { get; set; }
    [Parameter] public string ToDoTitle { get; set; }
    [Parameter] public DateTime? ToDoDateTime { get; set; }
    [Parameter] public string? ToDoDuration { get; set; }
    [Parameter] public string? ToDoLocation { get; set; }

    ToDoItem Editing = new();

    string message = string.Empty;
    string cssClass = string.Empty;

    IEnumerable<ToDoItem> todos = new List<ToDoItem>();


    protected override void OnInitialized()
    {
        Editing = repository.GetToDoById(ToDoId);
       
    }

    void Edit()
    {
        
        var result = repository.EditToDo(Editing);
        if (result == true)
        {
            cssClass = "alert alert-success";
            message = "Editing success!";
            UpdateToDo();
        }
        else
        {
            cssClass = "alert alert-danger";
            message = "Editing failed!";
        }

    }
    void UpdateToDo()
    {
        todos = new List<ToDoItem>();
        todos = repository.GetAllItems();
    }
}
